// The Mocha test copy directly from https://github.com/freeCodeCamp/freeCodeCamp/blob/main/curriculum/challenges/english/05-back-end-development-and-apis/back-end-development-and-apis-projects
// Most code here was generated by Github Copilot. It work quite well for a general use case. Not perfect test but works for local.
const request = require('supertest');
var assert = require('assert');
var app = require('../app');
const should = require('should');

describe("You can POST to /api/users with form data username to create a new user.", () => {
    const agent = request.agent(app);
    const username = 'random_test' + Date.now();
    it("Should Allow create new user", (done) => {
        agent.post('/api/users')
            .send({ username: username })
            .expect(200)
            .expect()
            .end((err, res) => {
                if (err) return done(err);
                should.exist(res.body.username);
                should.exist(res.body._id);
                assert.equal(res.body.username, username);
                done();
            });
    });
});

describe("You can make a GET request to /api/users to get a list of all users.", () => {
    const agent = request.agent(app);
    it("Should return a list of users", (done) => {
        agent.get('/api/users')
            .expect(200)
            .end((err, res) => {
                if (err) return done(err);
                should.exist(res.body);
                should.exist(res.body[0].username);
                done();
            });
    });
    it("Each element in the array returned is an object literal containing a user's username and _id.", (done) => {
        agent.get('/api/users')
            .expect(200)
            .end((err, res) => {
                if (err) return done(err);
                should.exist(res.body[0].username);
                should.exist(res.body[0]._id);
                done();
            });
    });
})

describe("You can POST to /api/users/:_id/exercises with form data description, duration, and optionally date. If no date is supplied, the current date will be used.", () => {
    const agent = request.agent(app);
    const username = 'random_test' + Date.now();
    const description = 'description' + Date.now();
    const duration = Math.floor(Math.random() * 100);
    it("Should allow create new exercise", (done) => {
        agent.post('/api/users')
            .send({ username: username })
            .expect(200)
            .end((err, res) => {
                if (err) return done(err);
                const userId = res.body._id;
                agent.post('/api/users/' + userId + '/exercises')
                    .send({ description: description, duration: duration })
                    .expect(200)
                    .end((err, res) => {
                        if (err) return done(err);
                        should.exist(res.body.description);
                        should.exist(res.body.duration);
                        should.exist(res.body.date);
                        assert.equal(res.body.description, description);
                        assert.equal(res.body.duration, duration);
                        done();
                    });
            });
    });
})

describe("You can make a GET request to /api/users/:_id/logs to retrieve a full exercise log of any user.", () => {
    const agent = request.agent(app);
    const username = 'random_test' + Date.now();
    it("Should return a list of exercises", (done) => {
        agent.post('/api/users')
            .send({ username: username })
            .expect(200)
            .end((err, res) => {
                if (err) return done(err);
                const userId = res.body._id;
                // make POST request add exercise
                agent.post('/api/users/' + userId + '/exercises')
                    .send({ description: description, duration: duration })
                    .expect(200)
                    .end((err, res) => {
                        if (err) return done(err);                        
                        agent.get('/api/users/' + userId + '/logs')
                            .expect(200)
                            .end((err, res) => {
                                if (err) return done(err);
                                should.exist(res.body);
                                should.exist(res.body.count);
                                should.exist(res.body[0].description);
                                should.exist(res.body[0].duration);
                                should.exist(res.body[0].date);                        
                                done();
                            });
                    });
            });
    });
})